image: deploybothq/default-images:ubuntu-18.04

variables:
  LC_ALL: 'en_US.UTF-8'
  LANG: 'en_US.UTF-8'
  ANDROID_COMPILE_SDK: '29'
  ANDROID_BUILD_TOOLS: '29.0.1'
  ANDROID_SDK_TOOLS: '4333796'

before_script:
  - echo fs.inotify.max_user_instances=524288 | tee -a /etc/sysctl.conf && sysctl -p
  - echo fs.inotify.max_user_watches=524288 | tee -a /etc/sysctl.conf && sysctl -p
  - echo fs.inotify.max_queued_events=524288 | tee -a /etc/sysctl.conf && sysctl -p

stages:
  - notify
  - install
  - audit
  - test
  - deploy

# notify
notify-staging:
  stage: notify
  script:
    - curl -X POST -H 'Content-type:application/json' --data '{"message":"'"$(echo $CI_COMMIT_TITLE | xargs echo -n)"'\n#mobileapp\n#beta"}' $WORKPLACE_WEBHOOK
  only:
    - staging

# install
yarn-install:
  stage: install
  script:
    - yarn --frozen-lockfile
  cache:
    key: native-yarn-cache
    paths:
      - node_modules/

# audit
eslint:
  stage: audit
  script:
    - yarn --frozen-lockfile
    - yarn eslint
  cache:
    key: native-yarn-cache
    paths:
      - node_modules/

# test
yarn-test:
  stage: test
  script:
    - yarn --frozen-lockfile
    - echo $FCM_SENDER_ID > .env
    - yarn ci-test
  cache:
    key: native-yarn-cache
    paths:
      - node_modules/

android-test:
  stage: test
  allow_failure: true
  script:
    - apt-get update -qq
    - apt-get install openjdk-8-jdk ruby ruby-dev android-tools-adb wget tar unzip lib32stdc++6 lib32z1 -qq
    - yarn --frozen-lockfile
    - '[[ ! -d android-sdk-linux/ ]] && wget --quiet --output-document=android-sdk.zip https://dl.google.com/android/repository/sdk-tools-linux-${ANDROID_SDK_TOOLS}.zip'
    - '[[ ! -d android-sdk-linux/ ]] && unzip -d android-sdk-linux android-sdk.zip'
    - echo y | android-sdk-linux/tools/bin/sdkmanager "platforms;android-${ANDROID_COMPILE_SDK}" >/dev/null
    - echo y | android-sdk-linux/tools/bin/sdkmanager "platform-tools" >/dev/null
    - echo y | android-sdk-linux/tools/bin/sdkmanager "build-tools;${ANDROID_BUILD_TOOLS}" >/dev/null
    - export ANDROID_HOME=$PWD/android-sdk-linux
    - export PATH=$PATH:$PWD/android-sdk-linux/platform-tools/
    # temporarily disable checking for EPIPE error and use yes to accept all licenses
    - set +o pipefail
    - yes | android-sdk-linux/tools/bin/sdkmanager --licenses
    - set -o pipefail
    - gem update --system
    - gem install bundler
    - bundle install
    - echo $FCM_SENDER_ID > .env
    - echo $GOOGLE_SERVICES > android/app/google-services.json
    - bundle exec fastlane android test
  cache:
    key: android-sdk-cache
    paths:
      - android-sdk-linux/

ios-test:
  stage: test
  tags:
    - ios
  script:
    - yarn --frozen-lockfile
    - gem install bundler
    - bundle install
    - echo $FCM_SENDER_ID > .env
    - yarn start &
    - bundle exec fastlane ios test
    - killall node

# deploy
android-deploy-staging:
  stage: deploy
  allow_failure: true
  script:
    - apt-get update -qq
    - apt-get install openjdk-8-jdk ruby ruby-dev android-tools-adb wget tar curl unzip lib32stdc++6 lib32z1 -qq
    - yarn --frozen-lockfile
    - '[[ ! -d android-sdk-linux/ ]] && wget --quiet --output-document=android-sdk.zip https://dl.google.com/android/repository/sdk-tools-linux-${ANDROID_SDK_TOOLS}.zip'
    - '[[ ! -d android-sdk-linux/ ]] && unzip -d android-sdk-linux android-sdk.zip'
    - echo y | android-sdk-linux/tools/bin/sdkmanager "platforms;android-${ANDROID_COMPILE_SDK}" >/dev/null
    - echo y | android-sdk-linux/tools/bin/sdkmanager "platform-tools" >/dev/null
    - echo y | android-sdk-linux/tools/bin/sdkmanager "build-tools;${ANDROID_BUILD_TOOLS}" >/dev/null
    - export ANDROID_HOME=$PWD/android-sdk-linux
    - export PATH=$PATH:$PWD/android-sdk-linux/platform-tools/
    # temporarily disable checking for EPIPE error and use yes to accept all licenses
    - set +o pipefail
    - yes | android-sdk-linux/tools/bin/sdkmanager --licenses
    - set -o pipefail
    - gem update --system
    - gem install bundler
    - bundle install
    - echo $FCM_SENDER_ID > .env
    - echo $SUPPLY_JSON_KEY_DATA > google-auth.json
    - echo $GOOGLE_SERVICES > android/app/google-services.json
    - echo $KEYSTORE_64 | base64 -di | tee keystore.jks android/app/keystore.jks >/dev/null
    - curl $LOGIN_VIDEO_URL > assets/login-video.mp4
    - bundle exec fastlane android deploy_staging

  only:
    - staging

ios-deploy-staging:
  stage: deploy
  tags:
    - ios
  script:
    - yarn --frozen-lockfile
    - curl $LOGIN_VIDEO_URL > assets/login-video.mp4
    - echo $FCM_SENDER_ID > .env
    - gem install bundler
    - bundle install
    - yarn start &
    - bundle exec fastlane ios deploy_staging
    - killall node
  only:
    - staging
